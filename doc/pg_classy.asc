pg_classy
========
Jim C. Nasby <Jim.Nasby@BlueTreble.com>
v0.0.1, January 2015:
Initial draft.

= API

= Implementation
=== _pg_classy.class__get
[subs="macros"]
----
CREATE TYPE _pg_classy.class AS (
    class_id                int
    , class_name            text
    , class_version         int
    , unique_parameters     variant(https://github.com/decibel/trunklet/blob/master/doc/trunklet.asc#variant-modifier[trunklet_parameter])

    -- Denormalized from _trunklets._trunklets
    , preprocess_template_name  text
    , creation_template_name    text
    , test_template_name        text
);

_pg_classy.class__get( class_name text, class_version int )
RETURNS _pg_classy.class
DECLARE
    r_class _pg_classy.class;
BEGIN
    IF class_version IS NULL THEN
    END IF;

    -- Return an error if we don't get a record
    SELECT STRICT INTO r_class
            *
        FROM _pg_classy._class c
        WHERE c.class_name = class_name
            AND c.class_version = coalesce( class_version
                    , ( SELECT max(class_version) FROM _pg_classy._class WHERE class_name = class_name )
                )
    ;

    RETURN r_class;
END
----

=== _pg_classy.ainstantiated__get_loose
Get information about a single instantiation of a class. Do *NOT* throw an error if we don't find exactly 1 record.

[subs="macros"]
----
_pg_classy.instantiated__get_loose(
    class_id        int
    , unique_parameters
) RETURNS _pg_classy.instantiated
    SELECT *
        FROM _pg_classy.instantiated i
        WHERE i.class_id = class_id
            AND i.unique_parameters = unique_parameters
----

=== pg_classy.instantiate
[subs="macros"]
----
pg_classy.instantiate(
    class_name text
    , class_version int
    , parameters variant
)
DECLARE
    r_class record;
    r_instantiated record;
    v_parameters variant := paramaters;
    v_unique_parameters variant;
BEGIN
-- Note that class definitions might actually be stored in multiple tables
r_class := _pg_classy.class__get(class_name, class_version);

/*
 * Extract parameter values that will uniquely identify this instance of
 * class_name and make sure we haven't already registered them.
 */

v_unique_parameters := extract_parameters(r_class.unique_parameters, parameters);

/*
 * See if we're already instantiated. We don't bother with race condition
 * because our insert at the bottom will eventually fail if nothing else.
 */
r_instantiated := _pg_classy.instantiated__get( r_class.class_id, v_unique_paramaters );
IF FOUND THEN ERROR

/*
 * We may need to pre-process our parameters.
 */

IF r_class.preprocess_template_name IS NOT NULL THEN
    v_paramaters := https://github.com/decibel/trunklet/blob/master/doc/trunklet.asc#execute_into[execute_into_array(
        r_class.preprocess_template_name
        , class_version
        , creation_preprocess\[i\], parameters
    )];
END IF;

https://github.com/decibel/trunklet/blob/master/doc/trunklet.asc#execute[execute(
    r_class.creation_template_name
    , class_version
    , v_parameters
)];

BEGIN
INSERT INTO _pg_classy.instances(class_id, class_version, unique_parameters, final_parameters)
    VALUES( r_class.class_id, r_class.version, v_unique_parameters, v_paramaters )
;
EXCEPTION
    WHEN unique_violation THEN
        RAISE EXCEPTION 'class % identified by % already instantiated',
            class_name, v_unique_paramaters
        ;
END
END
----


=== Copyright and License
Copyright (c) 2015 Jim C. Nasby <Jim.Nasby@BlueTreble.com>.

